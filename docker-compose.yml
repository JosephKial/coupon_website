version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: coupon_db
    environment:
      POSTGRES_DB: coupon_db
      POSTGRES_USER: coupon_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_db_password_2024}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - coupon_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U coupon_user -d coupon_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: coupon_redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-secure_redis_password_2024} --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - coupon_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    security_opt:
      - no-new-privileges:true

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: coupon_api
    environment:
      DATABASE_URL: postgresql://coupon_user:${DB_PASSWORD:-secure_db_password_2024}@database:5432/coupon_db
      REDIS_URL: redis://:${REDIS_PASSWORD:-secure_redis_password_2024}@redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-jwt-key-change-in-production}
      ENVIRONMENT: ${ENVIRONMENT:-production}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,127.0.0.1,frontend}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost,http://localhost:3000,https://localhost}
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - coupon_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health', timeout=10)"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/logs
      - /app/temp

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: coupon_frontend
    depends_on:
      - backend
    networks:
      - coupon_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true

  # Reverse Proxy with HTTPS
  proxy:
    image: nginxproxy/nginx-proxy:alpine
    container_name: coupon_proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - certs:/etc/nginx/certs:ro
      - vhost:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - ./proxy/nginx.conf:/etc/nginx/conf.d/custom.conf:ro
    environment:
      DEFAULT_HOST: ${DOMAIN:-localhost}
      ENABLE_IPV6: "true"
    depends_on:
      - frontend
    networks:
      - coupon_network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # Let's Encrypt SSL Certificates
  letsencrypt:
    image: nginxproxy/acme-companion:latest
    container_name: coupon_letsencrypt
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - certs:/etc/nginx/certs:rw
      - vhost:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - acme:/etc/acme.sh
    environment:
      DEFAULT_EMAIL: ${SSL_EMAIL:-admin@example.com}
      NGINX_PROXY_CONTAINER: coupon_proxy
    depends_on:
      - proxy
    networks:
      - coupon_network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

networks:
  coupon_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  certs:
    driver: local
  vhost:
    driver: local
  html:
    driver: local
  acme:
    driver: local